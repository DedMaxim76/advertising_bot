from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hlink

from data import config
from handlers.users.balance_handlers.withdraw_qiwi import get_soum_to_withdrad, Max_Withdraw, Min_Withdraw, Card_Fee
from keyboards.inline.callback_datas import payment_method_callback, accept_card_callback, cancel_callback
from keyboards.inline.withdraw_inline_menu import accept_card_inline_menu, cancel_inline_menu
from loader import dp, bot
from utils.db_api.quick_commands import user_quick_commands
from utils.db_api.schemas.users import User
from utils.misc.qiwi import Payment


@dp.callback_query_handler(payment_method_callback.filter(method="card"))
async def withdraw_card(call: CallbackQuery, state: FSMContext):
    user: User = await user_quick_commands.select_user(call.from_user.id)
    await call.message.delete()
    await call.message.answer("–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ 2% + 50 —Ä—É–±–ª–µ–π.")
    if user.card:
        secret_card = user.card[12:]
        await call.message.answer(text=f"–û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤—ã–≤–æ–¥ –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É **** **** **** {secret_card}?",
                                  reply_markup=accept_card_inline_menu)
        await state.set_state("waiting_for_accept_card")
    else:
        await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b>:\n"
                                  "<i>*–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.</i>",
                                  reply_markup=cancel_inline_menu)
        await state.set_state("waiting_for_card")


@dp.callback_query_handler(cancel_callback.filter(withdraw_method="pass"), state="*")
async def cancel_withdraw(call: CallbackQuery, state: FSMContext):
    await call.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.")
    await call.message.delete()
    await state.finish()


@dp.callback_query_handler(accept_card_callback.filter(choice="yes"), state="waiting_for_accept_card")
async def withdraw_card_accept(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º—É –≤—ã–≤–æ–¥–∞:",
                              reply_markup=cancel_inline_menu)
    await state.set_state("waiting_for_soum_to_withdraw")


@dp.callback_query_handler(accept_card_callback.filter(choice="no"), state="waiting_for_accept_card")
async def withdraw_card_cancel(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await user_quick_commands.change_card(call.from_user.id)
    await call.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥:",
                              reply_markup=cancel_inline_menu)
    await state.set_state("waiting_for_card")


@dp.message_handler(state="waiting_for_card")
async def withdraw_card(message: types.Message, state: FSMContext):
    card = message.text.lower()
    if not card.isdigit() or len(card) != 16:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—Ä—Ç—ã....")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥:\n"
                             "–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.",
                             reply_markup=cancel_inline_menu)
        return
    await user_quick_commands.change_card(message.from_user.id, card)
    await message.answer(text="–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏? ",
                         reply_markup=cancel_inline_menu)
    await state.set_state("waiting_for_soum_to_withdraw")


@dp.message_handler(state="waiting_for_soum_to_withdraw")
async def withdraw_card_send(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await message.answer(text="–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏? ",
                             reply_markup=cancel_inline_menu)
        return
    user: User = await user_quick_commands.select_user(message.from_user.id)
    amount = float(message.text)
    amount_with_fee = (amount - Card_Fee) * 0.98
    if user.balance < amount:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤...")
        await state.finish()
        return
    if amount > Max_Withdraw or amount < Min_Withdraw + Card_Fee:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–∞ –≤—ã–≤–æ–¥–∞ 60 —Ä—É–±–ª–µ–π.\n"
                             "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 1000 —Ä—É–±–ª–µ–π.")
        await message.answer(text="–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏? ",
                             reply_markup=cancel_inline_menu)
        return
    if config.BALANCE_LIMIT < amount:
        await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤, –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞!")
        await state.finish()
        return
    prv_id = Payment.get_card_system(user.card)
    payment_data = {'sum': amount_with_fee,
                    'to_card': user.card,
                    'prv_id': prv_id}
    answer_from_qiwi = Payment.send_to_card(payment_data)
    try:
        status_transaction = answer_from_qiwi["transaction"]["state"]
    except:
        await bot.send_message(chat_id=config.ADMINS[0],
                               text=f"–£ {hlink('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', message.from_user.url)} –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ\n"
                                    f"–û—à–∏–±–∫–∞: {answer_from_qiwi['message']}")
        await message.answer("–ü—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n"
                             "–í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á—ë—Ç–∞!\n"
                             "–° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        await state.finish()
        return
    if status_transaction['code'] == "Accepted":
        await message.answer("–í—ã–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–∏ 2 —á–∞—Å–æ–≤.\n"
                             "–ö–æ–º–∏—Å—Å–∏—è Qiwi 2% + 50 —Ä—É–±–ª–µ–π.\n"
                             "–í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á—ë—Ç–∞!")
        await user_quick_commands.change_balance(message.from_user.id, -amount)
        config.BALANCE_LIMIT -= amount
        config.ADMIN_BALANCE -= amount
        if user.username:
            username = user.username
        else:
            username = " - "
        await bot.send_message(chat_id=config.MAIN_CHAT_ID,
                               text=f"""‚ùóÔ∏è–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞   ‚ùóÔ∏è

–ö –≤—ã–≤–æ–¥—É: {amount} –º–æ–Ω–µ—Ç
–ù–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: @{username}
id –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {user.id}

–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ü•∞
""")
    await state.finish()
